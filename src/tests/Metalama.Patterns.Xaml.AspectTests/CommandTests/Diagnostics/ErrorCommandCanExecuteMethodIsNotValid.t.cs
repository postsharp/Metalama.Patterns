// Error LAMA5207 on `ExecuteGeneric`: `No match was found using the default naming convention. See other warnings for details.`
// Warning LAMA5204 on `CanExecuteGeneric`: `The method was identified as a candidate can-execute method for [Command] method ErrorCommandCanExecuteMethodIsNotValid.ExecuteGeneric() by the default naming convention, but the signature is not valid. The method must not be generic, must return bool and may optionally have a single parameter of any type, but which must not be a ref or out parameter.`
// Error LAMA5207 on `ExecuteNotBool`: `No match was found using the default naming convention. See other warnings for details.`
// Warning LAMA5204 on `CanExecuteNotBool`: `The method was identified as a candidate can-execute method for [Command] method ErrorCommandCanExecuteMethodIsNotValid.ExecuteNotBool() by the default naming convention, but the signature is not valid. The method must not be generic, must return bool and may optionally have a single parameter of any type, but which must not be a ref or out parameter.`
// Error LAMA5207 on `ExecuteTwoParameters`: `No match was found using the default naming convention. See other warnings for details.`
// Warning LAMA5204 on `CanExecuteTwoParameters`: `The method was identified as a candidate can-execute method for [Command] method ErrorCommandCanExecuteMethodIsNotValid.ExecuteTwoParameters() by the default naming convention, but the signature is not valid. The method must not be generic, must return bool and may optionally have a single parameter of any type, but which must not be a ref or out parameter.`
// Error LAMA5207 on `ExecuteRefParameter`: `No match was found using the default naming convention. See other warnings for details.`
// Warning LAMA5204 on `CanExecuteRefParameter`: `The method was identified as a candidate can-execute method for [Command] method ErrorCommandCanExecuteMethodIsNotValid.ExecuteRefParameter() by the default naming convention, but the signature is not valid. The method must not be generic, must return bool and may optionally have a single parameter of any type, but which must not be a ref or out parameter.`